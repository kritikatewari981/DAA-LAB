Given an already sorted array of positive integers, design an algorithm and implement it using a program to find whether given key element is present in the array or not. Also, find total number of comparisons for each input case. (Time Complexity = O(logn), where n is the size of input).
ans:-

#include<iostream>                                //time complexity of binary search is O(logn) and in best case it is O(1)
using namespace std;                              //it is used to search the element in sorted array
void binarysearch(int arr[],int n,int x)          //time complexity is o(nlogn) when we sort the array and then apply binary search
{
    int mid;
    int low=0;
    int found=0;
    int high=n-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(arr[mid]==x)
        {
            cout<<"the element is present\n";
            cout<<"comparisons are "<<mid+1<<endl;
            found++;
            break;
        }
        else if(arr[mid]<x)
        {
            low=mid+1;
    
        }
        else{
            high=mid-1;
        }
    }
    if(found==0)
    {
        cout<<"the element is not present\n";
    }
}
int main()
{
    int n,i,x;
    cout<<"enter the size of array ";
    cin>>n;
    int arr[n];//declaration
    cout<<"enter the elements of array ";
    for(i=0;i<n;i++)
    {
        cin>>arr[i];//input of elemets
    }
    cout<<"enter the element to be searched ";
    cin>>x;
    binarysearch(arr,n,x);
    return 0;

}
